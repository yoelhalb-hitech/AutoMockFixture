// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by '.NET Wrapper Class Generator'
//     Product Version:0.8.8181.29174
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;

namespace AutoMoqExtensions.AutoMockUtils
{
    public class AutoMockPropertyInfo : PropertyInfo
    {

        private PropertyInfo propertyInfo;

        public AutoMockPropertyInfo(PropertyInfo propertyInfo)
        {
            this.propertyInfo = propertyInfo;
            propType = AutoMockHelpers.GetAutoMockType(propertyInfo.PropertyType);
        }

        public override System.Reflection.PropertyAttributes Attributes => propertyInfo.Attributes;

        public override bool CanRead => propertyInfo.CanRead;

        public override bool CanWrite => propertyInfo.CanWrite;

        public override IEnumerable<CustomAttributeData> CustomAttributes => propertyInfo.CustomAttributes;
        public override Type DeclaringType => propertyInfo.DeclaringType;

        public override MethodInfo GetMethod => propertyInfo.GetMethod;


        public override MemberTypes MemberType => propertyInfo.MemberType;

        public override int MetadataToken => propertyInfo.MetadataToken;

        public override Module Module => propertyInfo.Module;
        public override string Name => propertyInfo.Name;

        private readonly Type propType;
        public override Type PropertyType => propType;

        public override Type ReflectedType => propertyInfo.ReflectedType;

        public override MethodInfo SetMethod => propertyInfo.SetMethod;
        public override MethodInfo[] GetAccessors(Boolean nonPublic) => propertyInfo.GetAccessors(nonPublic);

        public override object GetConstantValue() => propertyInfo.GetConstantValue();

        public override object[] GetCustomAttributes(Type attributeType, Boolean inherit) 
                => propertyInfo.GetCustomAttributes(attributeType, inherit);


        public override object[] GetCustomAttributes(Boolean inherit) => propertyInfo.GetCustomAttributes(inherit);
        public override IList<System.Reflection.CustomAttributeData> GetCustomAttributesData()
            => propertyInfo.GetCustomAttributesData();       

        public override MethodInfo GetGetMethod(Boolean nonPublic) => propertyInfo.GetGetMethod(nonPublic);

        public override ParameterInfo[] GetIndexParameters() => propertyInfo.GetIndexParameters();

        public override Type[] GetOptionalCustomModifiers() => propertyInfo.GetOptionalCustomModifiers();

        public override object GetRawConstantValue() => propertyInfo.GetRawConstantValue();

        public override Type[] GetRequiredCustomModifiers() => propertyInfo.GetRequiredCustomModifiers();

        public override MethodInfo GetSetMethod(Boolean nonPublic) => propertyInfo.GetSetMethod(nonPublic);

        public override object GetValue(Object obj, Object[] index) => propertyInfo.GetValue(obj, index);
        public override object GetValue(Object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture)
            => propertyInfo.GetValue(obj, invokeAttr, binder, index, culture);       

        public override bool IsDefined(Type attributeType, Boolean inherit) => propertyInfo.IsDefined(attributeType, inherit);


        public override void SetValue(Object obj, Object value, Object[] index) => propertyInfo.SetValue(obj, value, index);


        public override void SetValue(Object obj, Object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture)
            => propertyInfo.SetValue(obj, value, invokeAttr, binder, index, culture);
        
    }
}


