// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by '.NET Wrapper Class Generator'
//     Product Version:0.8.8181.29174
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Reflection;
using System;
using System.Globalization;

namespace AutoMoqExtensions.AutoMockUtils
{


    public class AutoMockFieldInfo : FieldInfo
    {

        private FieldInfo fieldInfo;

        public AutoMockFieldInfo(FieldInfo fieldInfo)
        {
            this.fieldInfo = fieldInfo;
            fieldType = AutoMockHelpers.GetAutoMockType(fieldInfo.FieldType);
        }

        public override FieldAttributes Attributes => fieldInfo.Attributes;
        public override IEnumerable<CustomAttributeData> CustomAttributes => fieldInfo.CustomAttributes;
        public override Type DeclaringType => fieldInfo.DeclaringType;
        public override RuntimeFieldHandle FieldHandle => fieldInfo.FieldHandle;

        private Type fieldType;
        public override Type FieldType => fieldType;
        public override bool IsSecurityCritical => fieldInfo.IsSecurityCritical;

        public override bool IsSecuritySafeCritical => fieldInfo.IsSecuritySafeCritical;

        public override bool IsSecurityTransparent => fieldInfo.IsSecurityTransparent;
        public override MemberTypes MemberType => fieldInfo.MemberType;
        public override int MetadataToken => fieldInfo.MetadataToken;
        public override Module Module => fieldInfo.Module;
        public override string Name => fieldInfo.Name;

        public override Type ReflectedType => fieldInfo.ReflectedType;

        public override object[] GetCustomAttributes(bool inherit) => fieldInfo.GetCustomAttributes(inherit);

        public override object[] GetCustomAttributes(Type attributeType, bool inherit)
            => fieldInfo.GetCustomAttributes(attributeType, inherit);

        public override IList<CustomAttributeData> GetCustomAttributesData() => fieldInfo.GetCustomAttributesData();

        public override Type[] GetOptionalCustomModifiers() => fieldInfo.GetOptionalCustomModifiers();

        public override object GetRawConstantValue() => fieldInfo.GetRawConstantValue();

        public override Type[] GetRequiredCustomModifiers() => fieldInfo.GetRequiredCustomModifiers();

        public override object GetValue(Object obj) => fieldInfo.GetValue(obj);

        public override object GetValueDirect(TypedReference obj) => fieldInfo.GetValueDirect(obj);

        public override bool IsDefined(Type attributeType, Boolean inherit) => fieldInfo.IsDefined(attributeType, inherit);

        public override void SetValue(Object obj, Object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture) 
            => fieldInfo.SetValue(obj, value, invokeAttr, binder, culture);

        public override void SetValueDirect(TypedReference obj, Object value) 
            => fieldInfo.SetValueDirect(obj, value);
    }
}


